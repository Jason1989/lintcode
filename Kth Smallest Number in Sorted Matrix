public class Solution {
    /**
     * @param matrix: a matrix of integers
     * @param k: an integer
     * @return: the kth smallest number in the matrix
     */
    public int kthSmallest(int[][] matrix, int k) {
        PriorityQueue<Point> minheap = new PriorityQueue<Point>(k, new PointComparator());
        int m = matrix.length, n = matrix[0].length;
        boolean[][]visited = new boolean[m][n];
        minheap.add(new Point(0, 0, matrix[0][0]));
        visited[0][0] = true;
        for(int i = 0; i < k - 1; i++){
            Point cur = minheap.poll();
            int x = cur.x, y = cur.y;
            if(x + 1 < m && !visited[x + 1][y]){
                Point down = new Point(cur.x + 1, y, matrix[x + 1][y]);
                visited[x + 1][y] = true;
                minheap.add(down);
            }
            if(y + 1 < n && !visited[x][y + 1]){
                Point right = new Point(cur.x, y + 1, matrix[x][y + 1]);
                visited[x][y + 1] = true;
                minheap.add(right);
            }
        }
        return minheap.poll().val;
    }
}

class Point{
    int x;
    int y;
    int val;
    public Point(int x, int y, int val){
        this.x = x;
        this.y = y;
        this.val = val;
    }
}

class PointComparator implements Comparator<Point>{
    public int compare(Point a, Point b){
        return a.val - b.val;
    }
}
