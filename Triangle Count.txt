Question:Given an array of integers, how many three numbers can be found in the array, so that we can build an triangle whose three edges length is the three numbers that we find?

Example
Given array S = [3,4,6,7], return 3. They are:

[3,4,6]
[3,6,7]
[4,6,7]
Given array S = [4,4,4,4], return 4. They are:

[4(1),4(2),4(3)]
[4(1),4(2),4(4)]
[4(1),4(3),4(4)]
[4(2),4(3),4(4)]

解题思路：

要组成一个三角形的条件是两边之和大于第三边，该题其实也是Two Sum的变种，即以第三边的长度与target，找sum比target大的pair的个数。将数组排序后，two pointer中常用的high作为第三边，
从0和high - 1中找符合条件的pair.

public class Solution {
    /**
     * @param S: A list of integers
     * @return: An integer
     */
    public int triangleCount(int S[]) {
        //two pointer
        if(S == null || S.length == 0) return 0;
        Arrays.sort(S);
        int len = S.length;
        int res = 0;
        for(int i = len - 1; i >= 2; i--){
            for(int high = i - 1; high >= 1; high--){
                int low = 0;
                while(low < high && S[low] + S[high] <= S[i]){
                    low++;
                }
                if(low < high && S[low] + S[high] > S[i]){
                    res += high - low;
                    continue;
                }
            }
        }
        return res;
    }
}
