Question: Given two integer arrays sorted in ascending order and an integer k. Define sum = a + b, 
where a is an element from the first array and b is an element from the second one. 
Find the kth smallest sum out of all possible sums.

Example
Given [1, 7, 11] and [2, 4, 6].

For k = 3, return 7.

For k = 4, return 9.

For k = 8, return 15.

解题思路：看到题目找第K个最小的和，首先考虑到的就是应该考虑用Heap来解决，然后因为找第k最小，所以用最小堆。

    1 - 7 - 11
2 - 3 - 9 - 13
4 - 5 - 11 - 15
6 - 11 - 13 - 17

将两个数组的和拼出来的话，可以看到从0,0点出发，次小的值只能出现在它的右边或者下边，因此可以不断往queue中压入node，再将poll出来的node的右方node
和下方node压入queue，记录poll的次数，便可拿到第K小的sum。需要注意的是控制node不会被重复访问，比如表中的11可以由9向下也可以由5向右。

public class Solution {
    /**
     * @param A an integer arrays sorted in ascending order
     * @param B an integer arrays sorted in ascending order
     * @param k an integer
     * @return an integer
     */
    public int kthSmallestSum(int[] A, int[] B, int k) {
        // Write your code here
        PriorityQueue<Point> queue = new PriorityQueue<>(k, new PointComparator());
        Point root = new Point(0, 0, A[0] + B[0]);
        queue.add(root);
        boolean[][]visited = new boolean[A.length][B.length];
        visited[0][0] = true;
        for(int i = 1; i < k; i++){
            Point p = queue.poll();
            int x = p.x, y = p.y;
            if(x + 1 < A.length && !visited[x + 1][y]){
                queue.add(new Point(x + 1, y, A[x + 1] + B[y]));
                visited[x + 1][y] = true;
            }
            if(y + 1 < B.length && !visited[x][y + 1]){
                queue.add(new Point(x, y + 1, A[x] + B[y + 1]));
                visited[x][y + 1] = true;
            }
        }
        return queue.peek().value;
    }
}

class Point{
    int x;
    int y;
    int value;
    
    Point(int x, int y, int value){
        this.x = x;
        this.y = y;
        this.value = value;
    }
    
}

class PointComparator implements Comparator<Point>{
    
    public int compare(Point p1, Point p2){
        return p1.value - p2.value;
    }
    
}
