Question: Find the number Weak Connected Component in the directed graph. Each node in the graph contains a label and a list 
of its neighbors. (a connected set of a directed graph is a subgraph in which any two vertices are connected by direct edge path.)

Example
Given graph:

A----->B  C
 \     |  | 
  \    |  |
   \   |  |
    \  v  v
     ->D  E <- F
Return {A,B,D}, {C,E,F}. Since there are two connected component which are {A,B,D} and {C,E,F}

解题思路： 该题和undriectednode不同的是该题是有向图，无向图可以使用的BFS本题并不适用。像例子中的C E F，C可以到E但是E不可以到F。
考虑将所有的node都做一遍union find，有关系的node都会有相同的father node， 维护一个map<Integer, Node>就可以把有关系的node都放入一个集合中。
union find的小变种，此处的int[]id变成Map<Integer, Integer>

/**
 * Definition for Directed graph.
 * class DirectedGraphNode {
 *     int label;
 *     ArrayList<DirectedGraphNode> neighbors;
 *     DirectedGraphNode(int x) { label = x; neighbors = new ArrayList<DirectedGraphNode>(); }
 * };
 */
public class Solution {
   
    //BFS
   
    public List<List<Integer>> connectedSet2(ArrayList<DirectedGraphNode> nodes) {
        Set<Integer> set = new HashSet<>();
        for(DirectedGraphNode node : nodes){
            set.add(node.label);
            for(DirectedGraphNode neighbor : node.neighbors){
                set.add(neighbor.label);
            }
        }
        UnionFind uf = new UnionFind(set);
        for(DirectedGraphNode node : nodes){
            for(DirectedGraphNode neighbor : node.neighbors){
                int fnode = uf.find(node.label);
                int nnode = uf.find(neighbor.label);
                if(fnode != nnode){
                    uf.union(fnode, nnode);
                }
            }
        }
        List<List<Integer>> res = new ArrayList<>();
        Map<Integer, List<Integer>> map = new HashMap<>();
        for(int i : set){
            int fa = uf.find(i);
            if(!map.containsKey(fa)){
                map.put(fa, new ArrayList<Integer>());
            }
            map.get(fa).add(i);
        }
        for(List<Integer> list : map.values()){
            Collections.sort(list);
            res.add(list);
        }
        return res;
    }
}

class UnionFind{
    
    Map<Integer, Integer> father = new HashMap<>();
    
    public UnionFind(Set<Integer> set){
        for(int i : set){
            father.put(i, i);
        }
    }
    
    public int find(int i){
        while(i != father.get(i)){
            i = father.get(i);
        }
        return i;
    }
    
    public void union(int a, int b){
        int fa = father.get(a);
        int fb = father.get(b);
        if(fa != fb){
            father.put(fa, fb);
        }
    }    
}

时间复杂度：所有操作复杂度最高的是对所有的node进行union find这里，union find的复杂度是O(mlong(n))，m是操作数，n是node的个数。
n个node，进行union find的操作数约等于n，所以为O(nlong(n)),最后还有一个排序,复杂度也是O(nlog(n))，所以整体的时间复杂度还是O(nlog(n))
