Question: Given n nodes in a graph labeled from 1 to n. There is no edges in the graph at beginning.

You need to support the following method:
1. connect(a, b), an edge to connect node a and node b
2. query(a), Returns the number of connected component nodes which include node a.

Example
5 // n = 5
query(1) return 1
connect(1, 2)
query(1) return 2
connect(2, 4)
query(1) return 3
connect(1, 4)
query(1) return 3

解题思路： 典型的Union Find题型，此处的query方法可以考虑到在weighted quick find中便于考虑树大小所使用的size数组，
每个root的size就是此处需要找到的connected nodes

public class ConnectingGraph2 {
    
    int[] id;
    int[] size;

    public ConnectingGraph2(int n) {
        id = new int[n + 1];
        size = new int[n + 1];
        for(int i = 1; i <= n; i++){
            id[i] = i;
            size[i] = 1;
        }
    }
    
    public int root(int i){
        while(i != id[i]){
            id[i] = id[id[i]];
            i = id[i];
        }
        return i;
    }

    public void connect(int a, int b) {
        int roota = root(a);
        int rootb = root(b);
        if(roota != rootb){
            if(size[roota] < size[rootb]){
                size[rootb] += size[roota];
                id[roota] = rootb;
            }else{
                size[roota] += size[rootb];
                id[rootb] = roota;
            } 
        }
        
    }
        
    public int query(int a) {
        int roota = root(a);
        return size[roota];
    }
}
