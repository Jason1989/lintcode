Question: Given a boolean 2D matrix, find the number of islands.

Example
Given graph:

[
  [1, 1, 0, 0, 0],
  [0, 1, 0, 0, 1],
  [0, 0, 0, 1, 1],
  [0, 0, 0, 0, 0],
  [0, 0, 0, 0, 1]
]
return 3

解题思路：这是一道面试经常会碰到的高频题，可以用DFS或者BFS，注意维护visited数组，将遍历过的元素予以标记。BFS的话需要额外创建一个Point类，

public class Solution {
    /**
     * @param grid a boolean 2D matrix
     * @return an integer
     */
     
    /*
    DFS
    public int numIslands(boolean[][] grid) {
        //dfs or bfs
        if(grid == null || grid.length == 0) return 0;
        int m = grid.length, n = grid[0].length;
        boolean[][]visited = new boolean[m][n];
        int count = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] && !visited[i][j]){
                    dfs(grid, i, j, visited);
                    count++;
                }
            }
        }
        return count;
    }
    
    public void dfs(boolean[][] grid, int i, int j, boolean[][] visited){
        if(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length
        || !grid[i][j] || visited[i][j]) return;
        visited[i][j] = true;
        dfs(grid, i + 1, j, visited);
        dfs(grid, i - 1, j, visited);
        dfs(grid, i, j + 1, visited);
        dfs(grid, i, j - 1, visited);
    }*/
    
    //BFS
    public int numIslands(boolean[][] grid) {
        if(grid == null || grid.length == 0) return 0;
        int m = grid.length, n = grid[0].length;
        boolean[][]visited = new boolean[m][n];
        int count = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] && !visited[i][j]){
                    bfs(grid, i, j, visited);
                    count++;
                }
            }
        }
        return count;
    }
    
    public void bfs(boolean[][]grid, int i, int j, boolean[][]visited){
        Queue<Point> queue = new LinkedList<>();
        Point p = new Point(i, j);
        queue.add(p);
        while(!queue.isEmpty()){
            Point tmp = queue.poll();
            visited[tmp.x][tmp.y] = true;
            if(tmp.x > 0 && grid[tmp.x - 1][tmp.y] && !visited[tmp.x - 1][tmp.y]){
                queue.add(new Point(tmp.x - 1, tmp.y));
            }
            if(tmp.x <= grid.length - 2 && grid[tmp.x + 1][tmp.y] && !visited[tmp.x + 1][tmp.y]){
                queue.add(new Point(tmp.x + 1, tmp.y));
            }
            if(tmp.y > 0 && grid[tmp.x][tmp.y - 1] && !visited[tmp.x][tmp.y - 1]){
                queue.add(new Point(tmp.x, tmp.y - 1));
            }
            if(tmp. y <= grid[0].length - 2 && grid[tmp.x][tmp.y + 1] && !visited[tmp.x][tmp.y + 1]){
                queue.add(new Point(tmp.x, tmp.y + 1));
            }
        }
    }
}

class Point{
    int x;
    int y;
    Point(int x, int y){
        this.x = x;
        this.y = y;
    }
}

