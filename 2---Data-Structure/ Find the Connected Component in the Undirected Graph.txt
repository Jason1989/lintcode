Question: Find the number connected component in the undirected graph. Each node in the graph contains a label and a list of its neighbors.
(a connected component (or just component) of an undirected graph is a subgraph in which any two vertices are connected to 
each other by paths, and which is connected to no additional vertices in the supergraph.)

Notice Each connected component should sort by label.

Example
Given graph:

A------B  C
 \     |  | 
  \    |  |
   \   |  |
    \  |  |
      D   E
Return {A,B,D}, {C,E}. Since there are two connected component which is {A,B,D}, {C,E}

解题思路：如果理解了该题的意思之后就能发现，就是简单的将graph遍历，然后将每个node的value放入list中，每个graph都有一个list，返回的是一个list的集合。
Graph的遍历可以采用BFS的方式，bfs一般会与queue挂钩，同时需要注意环的存在，故加入一个visitd map去控制node的重复遍历。
存在一点疑问就是是否存在两个graph会共同占有一个子节点。

/**
 * Definition for Undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     ArrayList<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
public class Solution {
    
    //BFS    

    public List<List<Integer>> connectedSet(ArrayList<UndirectedGraphNode> nodes) {
        List<List<Integer>> res = new ArrayList();
        Map<UndirectedGraphNode, Boolean> visited = new HashMap<>();
        for(UndirectedGraphNode node : nodes){
            visited.put(node, false);
        }
        for(UndirectedGraphNode node : nodes){
            if(!visited.get(node)){
                bfs(res, node, visited);
            }
        }
        return res;
    }
    
    public void bfs(List<List<Integer>> res, UndirectedGraphNode node, Map<UndirectedGraphNode, Boolean> visited){
        Queue<UndirectedGraphNode> queue = new LinkedList<>();
        queue.add(node);
        visited.put(node, true);
        List<Integer> list = new ArrayList();
        while(!queue.isEmpty()){
            UndirectedGraphNode cur = queue.poll();
            list.add(cur.label);
            for(UndirectedGraphNode neighbor : cur.neighbors){
                if(!visited.get(neighbor)){
                    queue.add(neighbor);
                    visited.put(neighbor, true);
                }
            }
        }
        Collections.sort(list);
        res.add(list);
    }
    
    时间复杂度： 因为本题的逻辑就是用BFS去遍历graph，所以时间复杂度应为O(n) n为所有的node的个数
}
