Question:Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or 
vertically neighboring. The same letter cell may not be used more than once.

Example
Given board =

[
  "ABCE",
  "SFCS",
  "ADEE"
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.

解题思路：以ABCCED为例，找到第一个相同的字母A之后，需要在board中上下左右四个方向查找下一个字母B,如果找得到，则在找到的B的上下左右四个方向中查找下一个
字母C，以此类推，如果找到字母D，则return true，可以考虑到该题可以用深度优先DFS，不过需要注意维护一个visited的二维数组，防止字母的重复利用。

public class Solution {
    /**
     * @param board: A list of lists of character
     * @param word: A string
     * @return: A boolean
     */
    public boolean exist(char[][] board, String word) {
        // write your code here
        if(board == null || board.length == 0) return false;
        if(word == null || word.length() == 0) return true;
        int m = board.length, n = board[0].length;
        boolean[][] visited = new boolean[m][n];
        char[] arr = word.toCharArray();
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(dfs(board, arr, i, j, visited, 0)){
                    return true;
                }
            }
            
        }
        return false;
    }
    
    public boolean dfs(char[][] board, char[] arr, int x, int y, 
        boolean[][] visited, int index){
        if(index == arr.length){
            return true;
        }
        if(x < 0 || x >= board.length || y < 0 || y >= board[0].length || 
            board[x][y] != arr[index] || visited[x][y]){
            return false;
        }
        visited[x][y] = true;
        boolean res = dfs(board, arr, x + 1, y, visited, index + 1)||
                      dfs(board, arr, x - 1, y, visited, index + 1)||
                      dfs(board, arr, x, y + 1, visited, index + 1)||
                      dfs(board, arr, x, y - 1, visited, index + 1);
        visited[x][y] = false;
        return res;
    }
}

时间复杂度：因为board的每个点都可能是起点，所有每个点都要遍历，每个点都要考虑四个方向，因此操作执行数目为
O(m * n * (4 ^ 0 + 4 ^ 1 + 4 ^ 2 + ... + 4 ^ (len - 1))) len是单词的长度
所以时间复杂度为 O(m * n * 4 ^ len)
