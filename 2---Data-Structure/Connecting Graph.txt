Question:Given n nodes in a graph labeled from 1 to n. There is no edges in the graph at beginning.

You need to support the following method:
1. connect(a, b), add an edge to connect node a and node b. 2.query(a, b)`, check if two nodes are connected

Example
5 // n = 5
query(1, 2) return false
connect(1, 2)
query(1, 3) return false
connect(2, 4)
query(1, 4) return true

解题思路：该题是典型的Union Find的题目，常见的有四种解决方法 
  1. UnionFind 
  2. QuickUnion 
  3. Weighted QuickUnion 
  4. Weighted QuickUnion with Path Compression
  
  //代码是第四种，在weighted基础上，加上了路径压缩
  //在root的方法执行时，将节点指向他的爷爷节点，不影响整体复杂度的情况下可以让树尽可能的扁平化
  public class ConnectingGraph { 
    
    int[] id;
    int[] size;

    public ConnectingGraph(int n) {
        id = new int[n + 1];
        size = new int[n + 1];
        for(int i = 1; i <= n; i++){
            id[i] = i;
            size[i] = 1;
        }
    }

    public void connect(int a, int b) {
        int roota = root(a);
        int rootb = root(b);
        if(size[roota] < size[rootb]){
            size[rootb] += size[roota];
            id[roota] = rootb;
        }else{
            size[roota] += size[rootb];
            id[rootb] = roota;
        }
    }
    
    public int root(int i){
        while(i != id[i]){
            id[i] = id[id[i]];
            i = id[i];
        }
        return i;
    }
        
    public boolean  query(int a, int b) {
        return root(a) == root(b);
    }
}
